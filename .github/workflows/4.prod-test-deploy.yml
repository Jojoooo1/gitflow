name: "Release Production - Test & Deploy"

# Note: Every time a pull request is close from main this CI will be executed.

on:
  pull_request:
    types: [ closed ] # Warning: close event is triggered when closing or merging a PR
    branches: [ main ]

env:
  PROJECT_ID: YOUR_PROJECT_ID_PROD
  PROJECT_SA_KEY: ${{ secrets.YOUR_SA_KEY_PROD }}
  IMAGE_NAME: YOUR_DOCKER_IMAGE

concurrency:
  group: ci-release-${{ github.ref }}
  cancel-in-progress: true

jobs:

  prod-test:
    runs-on: ubuntu-latest
    if: (contains(toJSON(github.head_ref), 'release/') || contains(toJSON(github.head_ref), 'hotfix/')) && github.event.pull_request.merged == true
    steps:
      # 1. Setup
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Set up JDK
        uses: actions/setup-java@v3.9.0
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # 2. Test
      - name: Run Unit & Integration Tests
        run: mvn clean verify --no-transfer-progress

  prod-deploy:
    needs: [ prod-test ]
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.variables.outputs.IMAGE_TAG }}
      IMAGE_REGISTRY: ${{ steps.variables.outputs.IMAGE_REGISTRY }}
      RELEASE_VERSION: ${{ steps.variables.outputs.RELEASE_VERSION }}
    steps:
      # 1. Setup
      - uses: actions/checkout@v3
        # Note: By default, a pull request creates a new SHA (identifier)
        # Note: We set the ref to head_ref, in order to get the RELEASE_VERSION from the branch
        with:
          ref: ${{ github.head_ref }}
      - name: Set up JDK
        uses: actions/setup-java@v3.9.0
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # 2.1 Sets variables
      - name: Sets release variables
        id: variables
        run: |
          git fetch --prune --prune-tags origin
          
          # 1. Get tags
          LATEST_TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)") # gets tags across all branches, not just the current branch
          TAG_LIST=($(echo $LATEST_TAG | tr '.' ' '))
          [[ "${#TAG_LIST[@]}" -ne 2 ]] && echo "$RELEASE_VERSION is not a valid version" && exit 1
          
          # 2. Set release version
          if [[ "$GITHUB_HEAD_REF" == release* ]]
          then
           RELEASE_VERSION=$(( TAG_LIST[0] + 1 )).0;
          else
           RELEASE_VERSION=${TAG_LIST[0]}.$(( TAG_LIST[1] + 1));
          fi
          
          # 3. Set vars
          IMAGE_REGISTRY="gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}"
          IMAGE_TAG=${RELEASE_VERSION}-$(git rev-parse --short=4 HEAD)
          
          # 4. Set envs & outputs
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "::set-output name=IMAGE_TAG::${IMAGE_TAG}"
          echo "::set-output name=IMAGE_REGISTRY::${IMAGE_REGISTRY}"
          echo "::set-output name=RELEASE_VERSION::${RELEASE_VERSION}"

      # 2.2 Echo variables
      - name: Echo variables
        run: |
          echo "RELEASE_VERSION=$RELEASE_VERSION"
          echo "IMAGE_TAG=$IMAGE_TAG"
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY"

      # 3. Setup gcloud
      - id: auth
        uses: google-github-actions/auth@v1.0.0
        with:
          credentials_json: ${{ env.PROJECT_SA_KEY }} # Note: Needs to have storage admin role if first push to registry (create the bucket)

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.0.1
        with:
          project_id: ${{ env.PROJECT_ID }}

      # 4. Configure docker to use gcloud as a credential helper
      - name: Setup docker to authenticate via gcloud
        run: gcloud --quiet  auth configure-docker gcr.io

      # 5. Push to image registry
      - name: Deploy image
        run: |
          mvn clean compile jib:build --no-transfer-progress \
            -Djib.to.image=$IMAGE_REGISTRY \
            -Djib.to.tags=$IMAGE_TAG

      # 6. Notify if fails
      - name: Notify fails
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_ALERT }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-alerts
          status: FAILED
          color: danger

  prod-create-release:
    needs: [ prod-deploy ]
    runs-on: ubuntu-latest
    steps:
      # 1. Setup
      - uses: actions/checkout@v3
        # Note: By default, a pull request creates a new SHA (identifier)
        # Note: We set the ref to head_ref, in order to get the RELEASE_VERSION from the branch
        with:
          ref: ${{ github.head_ref }}
      - name: Set up JDK
        uses: actions/setup-java@v3.9.0
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Create release
        env:
          # GITHUB_TOKEN is needed to use gh CLI
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_VERSION=${{ needs.prod-deploy.outputs.RELEASE_VERSION }}
          git config user.name github-actions
          git config user.email github-actions@github.com

          git tag -a $RELEASE_VERSION -m "release: $RELEASE_VERSION"
          git push origin $RELEASE_VERSION
          gh release create $RELEASE_VERSION --title "$RELEASE_VERSION" --generate-notes

  prod-create-pull-request:
    needs: [ prod-deploy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: develop
          # fetch 0 indicates all history for all branches and tags.
          fetch-depth: 0
          # actions/checkout@v3 uses GITHUB_TOKEN. Events triggered by the GITHUB_TOKEN will not create a new workflow run. This is why we need to use a PERSON_ACCESS_TOKEN
          token: ${{ secrets.GITHUB_ACCESS_TOKEN }}
      - name: Set up JDK
        uses: actions/setup-java@v3.9.0
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Open PR to merge main into develop
        env:
          # Needed to use gh CLI
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          RELEASE_VERSION=${{ needs.prod-deploy.outputs.RELEASE_VERSION }}
          git config user.name github-actions
          git config user.email github-actions@github.com

          BRANCH_NAME="merge/$RELEASE_VERSION"
          git rebase origin/main

          git checkout -b $BRANCH_NAME
          git commit --allow-empty -am "Merge main into develop"
          git push origin "$BRANCH_NAME"

          gh pr create --base develop --head "$BRANCH_NAME" --title "Merge - $RELEASE_VERSION" --fill

      - name: Notify if fails
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK_ALERT }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-alerts
          status: FAILED
          color: danger
